#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineDsl

def type = "nodejs"
def product = "pcs"
def component = "frontend"

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

withPipeline(type, product, component) {
  onPR() {
    env.TEST_URL = "https://pcs-frontend-pr-${CHANGE_ID}.preview.platform.hmcts.net"
    enablePactAs([ AppPipelineDsl.PactRoles.CONSUMER ])
    afterAlways('smokeTests') {
      try {
        // Debug: Check if test script exists
        sh 'cat package.json | grep smoke || echo "Smoke test script missing in package.json!"'

        // Debug: Check if dependencies are installed
        sh 'yarn list || echo "Dependencies might be missing!"'

        // Debug: Run smoke tests with full logging
        sh 'yarn test:smoke || echo "Smoke test failed!"'

      } catch (Error) {
        unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
      }
    }
    afterAlways('functionalTest:preview') {
      try {
        publishHTML([
          allowMissing         : true,
          alwaysLinkToLastBuild: true,
          keepAll              : true,
          reportDir            : "playwright-report",
          reportFiles          : 'index.html',
          reportName           : 'PCS Frontend Functional Test Report'
        ])
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/tests-results/ManageCasesFunctional/*'
      } catch (Error) {
        unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
      }
    }
    afterSuccess('functionalTest:preview') {
      stage('Accessibility Test - preview') {
        try {
          yarnBuilder.yarn('test:accessibility')
        } catch (Error) {
          unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
        } finally {
          publishHTML([
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "playwright-report",
            reportFiles          : 'index.html',
            reportName           : 'Accessibility Test Report'
          ])
          steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/tests-results/ManageCasesFunctional/*'
        }
      }
    }
  }

  onMaster() {
    env.TEST_URL = "https://pcs.aat.platform.hmcts.net/"
    enablePactAs([ AppPipelineDsl.PactRoles.CONSUMER ])
    afterAlways('functionalTest:aat') {
      try {
        publishHTML([
          allowMissing         : true,
          alwaysLinkToLastBuild: true,
          keepAll              : true,
          reportDir            : "playwright-report",
          reportFiles          : 'index.html',
          reportName           : 'PCS Frontend Functional Test Report'
        ])
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/tests-results/ManageCasesAccessibility/*'
      } catch (Error) {
        unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
      }
    }
    afterSuccess('functionalTest:aat') {
      stage('Accessibility Test - aat') {
        try {
          yarnBuilder.yarn('test:accessibility')
        } catch (Error) {
          unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
        } finally {
          publishHTML([
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "playwright-report",
            reportFiles          : 'index.html',
            reportName           : 'Accessibility Test Report'
          ])
          steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/tests-results/ManageCasesAccessibility/*'
        }
      }
    }
  }
}
