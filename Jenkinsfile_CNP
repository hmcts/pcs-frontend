#!groovy

properties([
// H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
  parameters([
    string(
      name: 'PR_NUMBER',
      defaultValue: '',
      description: 'PR number (REQUIRED if running against another PR, leave blank otherwise).'
    ),
  ])
])

@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineDsl

def type = "nodejs"
def product = "pcs"
def component = "frontend"

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

static Map < String, Object > secret(String secretName, String envVariable) {
  [
    $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    envVariable: envVariable
  ]
}

def secrets = [
  'pcs-${env}': [
    secret('pcs-frontend-idam-secret', 'PCS_FRONTEND_IDAM_SECRET'),
    secret('idam-system-user-name', 'IDAM_SYSTEM_USERNAME'),
    secret('idam-system-user-password', 'IDAM_SYSTEM_PASSWORD'),
    secret('pcs-idam-test-user-password', 'PCS_IDAM_TEST_USER_PASSWORD')
  ]
]

withPipeline(type, product, component) {
  validateInputs()
  loadVaultSecrets(secrets)
  env.NODE_CONFIG_ENV = 'test'

  onPR() {
    handleEnvironmentSetting()
    // Skipping PACT publish on PRs until contracts are verified and CONSUMER_DEPLOY_CHECK can be added
    // enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
    afterAlways('functionalTest:preview') {
      try {
        publishHTML([
          allowMissing         : true,
          alwaysLinkToLastBuild: true,
          keepAll              : true,
          reportDir            : "allure-report",
          reportFiles          : 'index.html',
          reportName           : 'PCS Frontend Functional Test Report'
        ])
      } catch (Error) {
        unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
      }
    }
    afterAlways('functionalTest:preview') {
      stage('Validate Test Target') {
        if (params.PR_NUMBER?.trim()) {
          error("Tests passed but were run against PR ${params.PR_NUMBER}. " +
            "To merge this PR, run tests against master by leaving PR_NUMBER parameter blank.")
        }
      }
    }
  }

  onMaster() {
    env.TEST_URL = "https://pcs.aat.platform.hmcts.net/"
    enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
    afterAlways('functionalTest:aat') {
      try {
        publishHTML([
          allowMissing         : true,
          alwaysLinkToLastBuild: true,
          keepAll              : true,
          reportDir            : "allure-report",
          reportFiles          : 'index.html',
          reportName           : 'PCS Frontend Functional Test Report'
        ])
      } catch (Error) {
        unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
      }
    }
  }
}

def validateInputs() {
  if (params.PR_NUMBER && !params.PR_NUMBER.trim().matches("^\\d+\$")) {
    error("Validation Failed: PR number must contain only numerical values")
  }
}

def handleEnvironmentSetting() {
  env.TEST_URL = (params.PR_NUMBER?.trim())
    ? "https://pcs-frontend-pr-${params.PR_NUMBER}.preview.platform.hmcts.net"
    : "https://pcs-frontend-pr-${CHANGE_ID}.preview.platform.hmcts.net"
}
