#!groovy

properties([
// H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
  pipelineTriggers([cron('H 07 * * 1-5')]),
  parameters([
    choice(
      name: 'ENVIRONMENT',
      choices: ['aat', 'preview'],
      description: 'Environment to run the test.'
    ),
    string(
      name: 'PR_NUMBER',
      defaultValue: '',
      description: 'PR number (REQUIRED if environment is preview, leave blank otherwise).'
    ),
    booleanParam(
      name: 'CHROME_TESTS',
      defaultValue: true,
      description: 'Tick the checkbox to run E2E tests in Chrome.'
    ),
    booleanParam(
      name: 'FIREFOX_TESTS',
      defaultValue: true,
      description: 'Tick the checkbox to run E2E tests in Firefox.'
    ),
    booleanParam(
      name: 'WEBKIT_TESTS',
      defaultValue: true,
      description: 'Tick the checkbox to run E2E tests in Webkit.'
    ),
    booleanParam(
      name: 'ACCESSIBILITY_TESTS',
      defaultValue: true,
      description: 'Tick the checkbox to run Accessibility tests.'
    ),
  ])
])

@Library("Infrastructure")

def type = "nodejs"
def product = "pcs"
def component = "frontend"

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

withNightlyPipeline(type, product, component) {
  validateInputs()
  handleEnvironmentSetting()
  enableSlackNotifications('#pcs-tech')
  enableFortifyScan()
  afterSuccess('fortify-scan') {
    steps.archiveArtifacts allowEmptyArchive: true,
      artifacts: '**/Fortify Scan/**/*'
  }
}

def validateInputs() {
  if (params.ENVIRONMENT == 'preview' && (!params.PR_NUMBER?.trim())) {
    error("Validation Failed: PR number is required when environment is 'preview'")
  }
  if (params.ENVIRONMENT == 'preview' && !params.PR_NUMBER.trim().matches("^\\d+\$")) {
    error("Validation Failed: PR number must contain only numerical values")
  }
}

def handleEnvironmentSetting() {
  env.TEST_URL = (params.ENVIRONMENT == 'preview')
    ? "https://pcs-frontend-pr-${params.PR_NUMBER}.preview.platform.hmcts.net"
    : "https://pcs.${params.ENVIRONMENT}.platform.hmcts.net/"
}

def runE2ETests(yarnBuilder) {
  if (params.CHROME_TESTS) {
    runE2ETestsForBrowser(yarnBuilder, 'Chrome')
  }
  if (params.FIREFOX_TESTS) {
    runE2ETestsForBrowser(yarnBuilder, 'Firefox')
  }
  if (params.WEBKIT_TESTS) {
    runE2ETestsForBrowser(yarnBuilder, 'Safari')
  }
}

def runE2ETestsForBrowser(yarnBuilder, String browser) {
  stage("Full E2E Test - ${browser}") {
    try {
      yarnBuilder.yarn("test:E2e${browser}")
    } catch (Error) {
      unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
    } finally {
      publishHTML([
        allowMissing: true,
        alwaysLinkToLastBuild: true,
        keepAll: true,
        reportDir: "allure-report",
        reportFiles: 'index.html',
        reportName: "Full ${browser} E2E Test Report"
      ])
      steps.archiveArtifacts(
        allowEmptyArchive: true,
        artifacts: 'definitions/test/playwright-report/**'
      )
    }
  }
}

def runAccessibilityTests(yarnBuilder) {
  stage("Full Accessibility Test") {
    try {
      yarnBuilder.yarn("test:accessibility")
    } catch (Error) {
      unstable(message: "${STAGE_NAME} is unstable: " + Error.toString())
    } finally {
      publishHTML([
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "allure-report",
        reportFiles          : 'index.html',
        reportName           : 'Accessibility Test Report'
      ])
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'reports/tests-results/ManageCasesFunctional/*'
    }
  }
}
